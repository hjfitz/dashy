[ { creator: 'Neo Ighodaro',
    title: 'How to build a realtime chart in iOS ',
    link: 'https://dev.to/neo/how-to-build-a-realtime-chart-in-ios--42g5',
    pubDate: 'Fri, 02 Mar 2018 23:25:15 +0000',
    author: 'Neo Ighodaro',
    content: '\n\n<p>Nowadays, gathering data is one of the keys to understanding how products are perceived. Gathering some data from users can help you build better products and understand your users. However, all the data in the world would be useless without a way to visualize it.</p>\n\n<p>In this article, we will explore how to create a simple realtime chart in iOS. The chart will receive data and update in realtime to the screens of everyone currently logged into your application. We will assume this is a chart that monitors how many visitors are using a website. Let’s begin.</p>\n\n<p>For context, here is a sample of what we will be building:</p>\n\n<p><a href="https://res.cloudinary.com/practicaldev/image/fetch/s--raR5KmU0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.pusher.com/wp-content/uploads/2017/10/build-realtime-chart-in-ios-using-pusher.gif" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--raR5KmU0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.pusher.com/wp-content/uploads/2017/10/build-realtime-chart-in-ios-using-pusher.gif" alt=""></a></p>\n\n<h2>Requirements for building a realtime chart in iOS</h2>\n\n<p>Before we begin this tutorial, you will need to have the following requirements settled:<br>\n– A MacBook Pro.<br>\n– <a href="https://developer.apple.com/xcode/">Xcode</a> installed on your machine.<br>\n– Basic knowledge of <a href="https://developer.apple.com/swift/">Swift</a> and using Xcode.<br>\n– Basic knowledge of JavaScript (Node.js).<br>\n– <a href="https://docs.npmjs.com/getting-started/installing-node">Node.js</a> and NPM installed on your machine.<br>\n– <a href="http://www.raywenderlich.com/12139/introduction-to-cocoapods">Cocoapods</a> ****installed on your machine.<br>\n– A <a href="https://pusher.com">Pusher</a> application.</p>\n\n<p>When you have all the requirements, then we can begin.</p>\n\n<h2>Preparing to create our realtime chart application in Xcode</h2>\n\n<p>Launch Xcode on your Mac and create a new project (call it whatever you want). Follow the new application wizard and create a new <strong>Single-page application</strong>. Once the project has been created, close Xcode and launch your terminal application.</p>\n\n<p>In the terminal, <code>cd</code> to the root of the application directory. Then run the command <code>pod init</code>. This will generate a <strong>Podfile</strong>. Update the contents of the Podfile to the contents below (replace <code>PROJECT_NAME</code> with your project name):</p>\n\n\n\n<div class="highlight"><pre class="highlight plaintext"><code>    platform :ios, \'9.0\'\n    target \'PROJECT_NAME\' do\n      use_frameworks!\n      pod \'Charts\', \'~&gt; 3.0.2\'\n      pod \'PusherSwift\', \'~&gt; 4.1.0\'\n      pod \'Alamofire\', \'~&gt; 4.4.0\'\n    end\n\n</code></pre></div>\n\n\n\n<p>Save the Podfile and then go to your terminal and run the command: <code>pod install</code>.</p>\n\n<p>Running this command will install all the third-party packages we need to build our realtime iOS chart application.</p>\n\n<p>The first package it will install is <a href="https://github.com/danielgindi/Charts">Charts</a>, which is a package for making beautiful charts on iOS. The second package is the Pusher swift SDK. The last package is <a href="https://github.com/Alamofire/Alamofire">Alamofire</a>, a package for making HTTP requests on iOS.</p>\n\n<p>Once the installation is complete, open the <code>**.xcworkspace**</code> file in your project directory root. This should launch Xcode. Now we are ready to start creating our iOS application.</p>\n\n<h2>Creating our realtime chart application views in Xcode</h2>\n\n<p>To begin, we will create the necessary views we need for our realtime chart application. Open the <strong>Main.storyboard</strong> file and let’s start designing our view.</p>\n\n<p>First, create a rectangular view from edge to edge at the top of the View Controller in the storyboard. In that view, add a button and add the title “Simulate Visits”. Next, create another view that is also a rectangle, spanning from the end of the first view above to the bottom of the screen. This view will be where we will render the realtime chart.</p>\n\n<p>When you are done creating the views, you should have something like shown in the image below.</p>\n\n<p><a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dl76Df0n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.pusher.com/wp-content/uploads/2017/10/build-realtime-chart-in-ios-using-pusher-1.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dl76Df0n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.pusher.com/wp-content/uploads/2017/10/build-realtime-chart-in-ios-using-pusher-1.png" alt=""></a></p>\n\n<p>As it currently stands, the views do nothing. Let us connect some functionality to the iOS chart application view.</p>\n\n<h2>Adding basic functionality to our iOS chart application</h2>\n\n<p>As said before, our application’s views and buttons are not connected to our <code>ViewController</code> so let’s fix that.</p>\n\n<p>In Xcode, while the storyboard is still open, click on the “Show the Assistant Editor” button on the top right of the page to split the view into storyboard and code view. Now, click once on the button you created, and while holding <code>ctrl</code>, click and drag the link to the code editor. Then create an <code>@IBaction</code> as seen in the images below:</p>\n\n<p><a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9upsaXJc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.pusher.com/wp-content/uploads/2017/10/build-realtime-chart-in-ios-using-pusher-2.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9upsaXJc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.pusher.com/wp-content/uploads/2017/10/build-realtime-chart-in-ios-using-pusher-2.png" alt=""></a></p>\n\n<p><a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fCiZDa_e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.pusher.com/wp-content/uploads/2017/10/build-realtime-chart-in-ios-using-pusher-3.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fCiZDa_e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.pusher.com/wp-content/uploads/2017/10/build-realtime-chart-in-ios-using-pusher-3.png" alt=""></a></p>\n\n<p>When the link is complete, you should see something like this added to the code editor:</p>\n\n\n\n<div class="highlight"><pre class="highlight swift"><code>    <span class="kd">@IBAction</span> <span class="kd">func</span> <span class="nf">simulateButtonPressed</span><span class="p">(</span><span class="n">_</span> <span class="nv">sender</span><span class="p">:</span> <span class="kt">Any</span><span class="p">)</span> <span class="p">{</span>\n    <span class="p">}</span>\n\n</code></pre></div>\n\n\n\n<p>Great! Now that you have created the first link, we will have to create one more link to the chart view.</p>\n\n<p>On your storyboard, click the view and on the “Identity Inspection” tab, make sure the view is connected to <code>LineChartView</code> as seen below.</p>\n\n<p><a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u5kAmqH7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.pusher.com/wp-content/uploads/2017/10/realtime-chart-swift-linechartview.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u5kAmqH7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.pusher.com/wp-content/uploads/2017/10/realtime-chart-swift-linechartview.png" alt=""></a></p>\n\n<p>Now that the view is connected to a view class, repeat the same as we did before to link the button, only this time instead of creating an <code>@IBAction</code> we will create an <code>@IBOutlet</code>. Images are shown below:</p>\n\n<p><a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yD7OYrZc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.pusher.com/wp-content/uploads/2017/10/build-realtime-chart-in-ios-using-pusher-5.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yD7OYrZc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.pusher.com/wp-content/uploads/2017/10/build-realtime-chart-in-ios-using-pusher-5.png" alt=""></a></p>\n\n<p><a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UfyhjzcJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.pusher.com/wp-content/uploads/2017/10/build-realtime-chart-in-ios-using-pusher-6.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UfyhjzcJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.pusher.com/wp-content/uploads/2017/10/build-realtime-chart-in-ios-using-pusher-6.png" alt=""></a></p>\n\n<p>When the link is complete, you should see something like this added to the code editor:</p>\n\n\n\n<div class="highlight"><pre class="highlight swift"><code>    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">chartView</span><span class="p">:</span> <span class="kt">LineChartView</span><span class="o">!</span>\n\n</code></pre></div>\n\n\n\n<p>Finally, at the top of the <code>ViewController</code> import the Charts package. You can add the code below right under <code>import UIKit</code> in the <code>ViewController</code>.</p>\n\n\n\n<div class="highlight"><pre class="highlight swift"><code>    <span class="kd">import</span> <span class="kt">Charts</span>\n\n</code></pre></div>\n\n\n\n<p>Now that we have linked both elements to our code, every time the <strong>Simulate Visits</strong> button is pressed, the <strong>simulateButtonPressed</strong> function will be called.</p>\n\n<h2>Adding realtime functionality to our iOS chart application</h2>\n\n<p>The final piece of the puzzle will be displaying a chart and making it update in realtime across all devices viewing the chart.</p>\n\n<p>To achieve this, we will do the following:</p>\n\n<ul>\n<li>Create a function that updates our chart depending on the numbers.</li>\n<li>Make our request button call the backend which will in turn send simulated data to Pusher.</li>\n<li>Create a function that listens for events from Pusher and, when one is received, it triggers the update chart function we created earlier.</li>\n</ul>\n\n<p><strong>Create a trigger function to update our chart</strong><br>\nLet’s create the function that updates our chart depending on the numbers supplied to it. Open the <code>ViewController</code>, and in it declare a class property right under the class declaration. We will use this property to track the visitors:</p>\n\n\n\n<div class="highlight"><pre class="highlight swift"><code>    <span class="k">var</span> <span class="nv">visitors</span><span class="p">:</span> <span class="p">[</span><span class="kt">Double</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>\n\n</code></pre></div>\n\n\n\n<p>Next, we will add the function that will do the actual update to the chart view:</p>\n\n\n\n<div class="highlight"><pre class="highlight swift"><code>    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">updateChart</span><span class="p">()</span> <span class="p">{</span>\n        <span class="k">var</span> <span class="nv">chartEntry</span> <span class="o">=</span> <span class="p">[</span><span class="kt">ChartDataEntry</span><span class="p">]()</span>\n\n        <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span><span class="o">..&lt;</span><span class="n">visitors</span><span class="o">.</span><span class="n">count</span> <span class="p">{</span>\n            <span class="k">let</span> <span class="nv">value</span> <span class="o">=</span> <span class="kt">ChartDataEntry</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="kt">Double</span><span class="p">(</span><span class="n">i</span><span class="p">),</span> <span class="nv">y</span><span class="p">:</span> <span class="n">visitors</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>\n            <span class="n">chartEntry</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>\n        <span class="p">}</span>\n\n        <span class="k">let</span> <span class="nv">line</span> <span class="o">=</span> <span class="kt">LineChartDataSet</span><span class="p">(</span><span class="nv">values</span><span class="p">:</span> <span class="n">chartEntry</span><span class="p">,</span> <span class="nv">label</span><span class="p">:</span> <span class="s">"Visitor"</span><span class="p">)</span>\n        <span class="n">line</span><span class="o">.</span><span class="n">colors</span> <span class="o">=</span> <span class="p">[</span><span class="kt">UIColor</span><span class="o">.</span><span class="n">green</span><span class="p">]</span>\n\n        <span class="k">let</span> <span class="nv">data</span> <span class="o">=</span> <span class="kt">LineChartData</span><span class="p">()</span>\n        <span class="n">data</span><span class="o">.</span><span class="nf">addDataSet</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>\n\n        <span class="n">chartView</span><span class="o">.</span><span class="n">data</span> <span class="o">=</span> <span class="n">data</span>\n        <span class="n">chartView</span><span class="o">.</span><span class="n">chartDescription</span><span class="p">?</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">"Visitors Count"</span>\n    <span class="p">}</span>\n\n</code></pre></div>\n\n\n\n<p>In the code above, we declare <code>chartEntry</code> where we intend to store all our chart data. Then we loop through the available <code>visitors</code> and, for each of them, we add a new <code>ChartDataEntry(x: Double(i), y: visitors[i])</code> that tells the chart the X and Y positions.</p>\n\n<p>We set the color the line chart will be displayed in. We create the <code>LineChartData</code> and add the <code>line</code> which contains our data points. Finally, we add the data to the <code>chartView</code> and set the chart view description.</p>\n\n<p><strong>Make our simulate button call an endpoint</strong><br>\nThe next thing we need to do is make our request button trigger a backend which will in turn send simulated data to Pusher.</p>\n\n<p>To do this, we need to update the view controller one more time. In the <code>ViewController</code> import the Alamofire package right under the Charts package:</p>\n\n\n\n<div class="highlight"><pre class="highlight swift"><code>    <span class="kd">import</span> <span class="kt">Alamofire</span>\n\n</code></pre></div>\n\n\n\n<p>Now replace the <code>simulateButtonPressed</code> function with the code below:</p>\n\n\n\n<div class="highlight"><pre class="highlight swift"><code>    <span class="kd">@IBAction</span> <span class="kd">func</span> <span class="nf">simulateButtonPressed</span><span class="p">(</span><span class="n">_</span> <span class="nv">sender</span><span class="p">:</span> <span class="kt">Any</span><span class="p">)</span> <span class="p">{</span>\n        <span class="kt">Alamofire</span><span class="o">.</span><span class="nf">request</span><span class="p">(</span><span class="s">"http://localhost:4000/simulate"</span><span class="p">,</span> <span class="nv">method</span><span class="p">:</span> <span class="o">.</span><span class="n">post</span><span class="p">)</span><span class="o">.</span><span class="nf">validate</span><span class="p">()</span><span class="o">.</span><span class="n">responseJSON</span> <span class="p">{</span> <span class="p">(</span><span class="n">response</span><span class="p">)</span> <span class="k">in</span>\n            <span class="k">switch</span> <span class="n">response</span><span class="o">.</span><span class="n">result</span> <span class="p">{</span>\n            <span class="k">case</span> <span class="o">.</span><span class="nf">success</span><span class="p">(</span><span class="n">_</span><span class="p">):</span>\n                <span class="n">_</span> <span class="o">=</span> <span class="s">"Successful"</span>\n            <span class="k">case</span> <span class="o">.</span><span class="nf">failure</span><span class="p">(</span><span class="k">let</span> <span class="nv">error</span><span class="p">):</span>\n                <span class="nf">print</span><span class="p">(</span><span class="n">error</span><span class="p">)</span>\n            <span class="p">}</span>\n        <span class="p">}</span>\n    <span class="p">}</span>\n\n</code></pre></div>\n\n\n\n<p>In the code below, we use Alamofire to send a POST request to <a href="http://localhost:4000/simulate">http://localhost:4000/simulate</a> which is a local web server (we will create this backend soon). In a real application, this will typically point to a real web server.</p>\n\n<p>This endpoint does not take any parameters in order to keep the tutorial simple. We also do not need to do anything with the response. We just need the POST request to be sent every time the simulate visits button is pressed.</p>\n\n<p><strong>Tie in realtime functionality using Pusher</strong><br>\nTo make all this work, we will create a function that listens for events from Pusher and, when one is received, we save the value to <code>visitors</code> and then trigger the update chart function we created earlier.</p>\n\n<p>To do this, open the <code>ViewController</code> and import the <code>PusherSwift</code> SDK under the Alamofire package at the top:</p>\n\n\n\n<div class="highlight"><pre class="highlight swift"><code>    <span class="kd">import</span> <span class="kt">PusherSwift</span>\n\n</code></pre></div>\n\n\n\n<p>Next, we will declare a class property for the Pusher instance. We can do this right under the <code>visitors</code> declaration line:</p>\n\n\n\n<div class="highlight"><pre class="highlight swift"><code>    <span class="k">var</span> <span class="nv">pusher</span><span class="p">:</span> <span class="kt">Pusher</span><span class="o">!</span>\n\n</code></pre></div>\n\n\n\n<p>Then after declaring the property, we need to add the function below to the class so it can listen to the events:</p>\n\n\n\n<div class="highlight"><pre class="highlight swift"><code>    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">listenForChartUpdates</span><span class="p">()</span> <span class="p">{</span>\n        <span class="n">pusher</span> <span class="o">=</span> <span class="kt">Pusher</span><span class="p">(</span><span class="nv">key</span><span class="p">:</span> <span class="s">"PUSHER_KEY"</span><span class="p">,</span> <span class="nv">options</span><span class="p">:</span> <span class="kt">PusherClientOptions</span><span class="p">(</span><span class="nv">host</span><span class="p">:</span> <span class="o">.</span><span class="nf">cluster</span><span class="p">(</span><span class="s">"PUSHER_CLUSTER"</span><span class="p">)))</span>\n\n        <span class="k">let</span> <span class="nv">channel</span> <span class="o">=</span> <span class="n">pusher</span><span class="o">.</span><span class="nf">subscribe</span><span class="p">(</span><span class="s">"visitorsCount"</span><span class="p">)</span>\n\n        <span class="n">channel</span><span class="o">.</span><span class="nf">bind</span><span class="p">(</span><span class="nv">eventName</span><span class="p">:</span> <span class="s">"addNumber"</span><span class="p">,</span> <span class="nv">callback</span><span class="p">:</span> <span class="p">{</span> <span class="p">(</span><span class="nv">data</span><span class="p">:</span> <span class="kt">Any</span><span class="p">?)</span> <span class="o">-&gt;</span> <span class="kt">Void</span> <span class="k">in</span>\n            <span class="k">if</span> <span class="k">let</span> <span class="nv">data</span> <span class="o">=</span> <span class="n">data</span> <span class="k">as?</span> <span class="p">[</span><span class="kt">String</span><span class="p">:</span> <span class="kt">AnyObject</span><span class="p">]</span> <span class="p">{</span>\n                <span class="k">let</span> <span class="nv">count</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="s">"count"</span><span class="p">]</span> <span class="k">as!</span> <span class="kt">Double</span>\n                <span class="k">self</span><span class="o">.</span><span class="n">visitors</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="n">count</span><span class="p">)</span>\n                <span class="k">self</span><span class="o">.</span><span class="nf">updateChart</span><span class="p">()</span>\n            <span class="p">}</span>\n        <span class="p">})</span>\n\n        <span class="n">pusher</span><span class="o">.</span><span class="nf">connect</span><span class="p">()</span>\n    <span class="p">}</span> \n\n</code></pre></div>\n\n\n\n<p>In the code above, we instantiate Pusher and pass in our key and the cluster (you can get your key and cluster from your Pusher application’s dashboard). We then subscribe to the <code>visitorsChannel</code> and bind to the event name <code>addNumber</code> on that channel.</p>\n\n<p>When the event is triggered, we fire the logic in the callback which simply appends the count to <code>visitors</code> and then calls the <code>updateChart</code> function, which updates the actual Chart in realtime.</p>\n\n<p>Finally we call <code>pusher.connect()</code> which forms the connection to Pusher.</p>\n\n<p>In the <code>viewDidLoad</code> function just add a call to the <code>listenForChartUpdates</code> method:</p>\n\n\n\n<div class="highlight"><pre class="highlight swift"><code>    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>\n        <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>\n\n        <span class="c1">// ...stuff    </span>\n\n        <span class="nf">listenForChartUpdates</span><span class="p">()</span>\n    <span class="p">}</span>\n\n</code></pre></div>\n\n\n\n<p>That’s all! We have created our application in Xcode and we are ready for testing. However, to test, we need to create the backend that we send a <code>POST</code> request to when the button is clicked. To create this backend, we will be using Node.js. Let’s do that now.</p>\n\n<h2>Creating the backend service for our realtime iOS chart application</h2>\n\n<p>To get started, create a directory for the web application and then create some new files inside the directory:</p>\n\n<p>File: <strong>index.js</strong></p>\n\n\n\n<div class="highlight"><pre class="highlight javascript"><code>    <span class="c1">// -------------------------------------------------------</span>\n    <span class="c1">// Require Node dependencies</span>\n    <span class="c1">// -------------------------------------------------------</span>\n\n    <span class="kd">let</span> <span class="nx">Pusher</span>     <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">\'pusher\'</span><span class="p">);</span>\n    <span class="kd">let</span> <span class="nx">express</span>    <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">\'express\'</span><span class="p">);</span>\n    <span class="kd">let</span> <span class="nx">bodyParser</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">\'body-parser\'</span><span class="p">);</span>\n    <span class="kd">let</span> <span class="nx">app</span>        <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>\n\n    <span class="c1">// Instantiate Pusher</span>\n    <span class="kd">let</span> <span class="nx">pusher</span>     <span class="o">=</span> <span class="k">new</span> <span class="nx">Pusher</span><span class="p">(</span><span class="nx">require</span><span class="p">(</span><span class="s1">\'./config.js\'</span><span class="p">));</span>\n\n    <span class="c1">// -------------------------------------------------------</span>\n    <span class="c1">// Load express middlewares</span>\n    <span class="c1">// -------------------------------------------------------</span>\n\n    <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">bodyParser</span><span class="p">.</span><span class="nx">json</span><span class="p">());</span>\n    <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">bodyParser</span><span class="p">.</span><span class="nx">urlencoded</span><span class="p">({</span> <span class="na">extended</span><span class="p">:</span> <span class="kc">false</span> <span class="p">}));</span>\n\n    <span class="c1">// -------------------------------------------------------</span>\n    <span class="c1">// Simulate multiple changes to the visitor count value,</span>\n    <span class="c1">// this way the chart will always update with different</span>\n    <span class="c1">// values.</span>\n    <span class="c1">// -------------------------------------------------------</span>\n\n    <span class="nx">app</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">\'/simulate\'</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>\n      <span class="kd">var</span> <span class="nx">loopCount</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>\n      <span class="kd">let</span> <span class="nx">sendToPusher</span> <span class="o">=</span> <span class="nx">setInterval</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>\n        <span class="kd">let</span> <span class="nx">count</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">((</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="p">(</span><span class="mi">100</span> <span class="o">-</span> <span class="mi">1</span><span class="p">))</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>\n        <span class="nx">pusher</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="s1">\'visitorsCount\'</span><span class="p">,</span> <span class="s1">\'addNumber\'</span><span class="p">,</span> <span class="p">{</span><span class="na">count</span><span class="p">:</span><span class="nx">count</span><span class="p">})</span>\n        <span class="nx">loopCount</span><span class="o">++</span><span class="p">;</span>\n        <span class="k">if</span> <span class="p">(</span><span class="nx">loopCount</span> <span class="o">===</span> <span class="mi">20</span><span class="p">)</span> <span class="p">{</span>\n          <span class="nx">clearInterval</span><span class="p">(</span><span class="nx">sendToPusher</span><span class="p">);</span>\n        <span class="p">}</span>\n      <span class="p">},</span> <span class="mi">2000</span><span class="p">);</span>\n      <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">({</span><span class="na">success</span><span class="p">:</span> <span class="mi">200</span><span class="p">})</span>\n    <span class="p">})</span>\n\n\n    <span class="c1">// Handle index</span>\n    <span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="s1">\'/\'</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>\n      <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="s2">"It works!"</span><span class="p">);</span>\n    <span class="p">});</span>\n\n    <span class="c1">// Handle 404\'s</span>\n    <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">((</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>\n        <span class="kd">let</span> <span class="nx">err</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">\'Not Found\'</span><span class="p">);</span>\n        <span class="nx">err</span><span class="p">.</span><span class="nx">status</span> <span class="o">=</span> <span class="mi">404</span><span class="p">;</span>\n        <span class="nx">next</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>\n    <span class="p">});</span>\n\n    <span class="c1">// -------------------------------------------------------</span>\n    <span class="c1">// Serve application</span>\n    <span class="c1">// -------------------------------------------------------</span>\n\n    <span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="mi">4000</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>\n        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">\'App listening on port 4000!\'</span><span class="p">)</span>\n    <span class="p">});</span>\n\n</code></pre></div>\n\n\n\n<p>The file above is a simple Express application written in JavaScript. We instantiate all the packages we require and configure pusher using a config file we will create soon. Then we create a route <code>/simulate</code> and in this route we trigger the <code>addNumber</code> event in the <code>visitorCount</code> channel. This is the same channel and event the application is listening for.</p>\n\n<p>To make it a little easier, we use <code>setInterval</code> to send a random visitor count to the Pusher backend every 2000 milliseconds. After looping for 20 times, the loop stops. This should be sufficient to test our application.</p>\n\n<p>Create the next file <strong>config.js</strong>:</p>\n\n\n\n<div class="highlight"><pre class="highlight javascript"><code>    <span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>\n        <span class="na">appId</span><span class="p">:</span> <span class="s1">\'PUSHER_APP_ID\'</span><span class="p">,</span>\n        <span class="na">key</span><span class="p">:</span> <span class="s1">\'PUSHER_APP_KEY\'</span><span class="p">,</span>\n        <span class="na">secret</span><span class="p">:</span> <span class="s1">\'PUSHER_APP_SECRET\'</span><span class="p">,</span>\n        <span class="na">cluster</span><span class="p">:</span> <span class="s1">\'PUSHER_APP_CLUSTER\'</span><span class="p">,</span>\n    <span class="p">};</span>\n\n</code></pre></div>\n\n\n\n<p>Replace the <code>PUSHER_APP_*</code> keys with the credentials from your own Pusher application.</p>\n\n<p>The next and final file is <strong>package.json</strong>:</p>\n\n\n\n<div class="highlight"><pre class="highlight plaintext"><code>    {\n      "main": "index.js",\n      "dependencies": {\n        "body-parser": "^1.16.0",\n        "express": "^4.14.1",\n        "pusher": "^1.5.1"\n      }\n    }\n\n</code></pre></div>\n\n\n\n<p>In this file we simply declare dependencies.</p>\n\n<p>Now open terminal and <code>cd</code> to the root of the web application directory and run the commands below to install the NPM dependencies and run the application respectively:</p>\n\n\n\n<div class="highlight"><pre class="highlight plaintext"><code>    $ npm install\n    $ node index.js\n\n</code></pre></div>\n\n\n\n<p>When installation is complete and the application is ready you should see the output below:</p>\n\n<p><a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B0OXIu1y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.pusher.com/wp-content/uploads/2017/10/build-realtime-chart-in-ios-using-pusher-7.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B0OXIu1y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.pusher.com/wp-content/uploads/2017/10/build-realtime-chart-in-ios-using-pusher-7.png" alt=""></a></p>\n\n<h2>Testing the application</h2>\n\n<p>Once you have your local node web server running, you will need to make some changes so your application can talk to the local web server. In the <code>info.plist</code> file, make the following changes:</p>\n\n<p><a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MPghkE-h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.pusher.com/wp-content/uploads/2017/10/build-realtime-chart-in-ios-using-pusher-8.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MPghkE-h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.pusher.com/wp-content/uploads/2017/10/build-realtime-chart-in-ios-using-pusher-8.png" alt=""></a></p>\n\n<p>With this change, you can build and run your application and it will talk directly with your local web application.</p>\n\n<h2>Conclusion</h2>\n\n<p>This article has shown you how you can combine Pusher and the Charts package to create a realtime iOS chart application. There are many other chart types you can create using the package but, for brevity, we have done the easiest. You can explore the other chart types and even pass in multiple data points per request.</p>\n\n<p>If you have any questions, feedback or corrections, you can post them in the comments section below. The source code to the tutorial above is available on <a href="https://github.com/neoighodaro/Realtime-iOS-Chart">GitHub</a>.</p>\n\n<p>This post first appeared on the <a href="https://blog.pusher.com/how-to-build-a-realtime-chart-in-ios/">Pusher blog</a>.</p>\n\n\n',
    contentSnippet: 'Nowadays, gathering data is one of the keys to understanding how products are perceived. Gathering some data from users can help you build better products and understand your users. However, all the data in the world would be useless without a way to visualize it.\n\nIn this article, we will explore how to create a simple realtime chart in iOS. The chart will receive data and update in realtime to the screens of everyone currently logged into your application. We will assume this is a chart that monitors how many visitors are using a website. Let’s begin.\n\nFor context, here is a sample of what we will be building:\n\n\n\nRequirements for building a realtime chart in iOS\n\nBefore we begin this tutorial, you will need to have the following requirements settled:\n– A MacBook Pro.\n– Xcode installed on your machine.\n– Basic knowledge of Swift and using Xcode.\n– Basic knowledge of JavaScript (Node.js).\n– Node.js and NPM installed on your machine.\n– Cocoapods ****installed on your machine.\n– A Pusher application.\n\nWhen you have all the requirements, then we can begin.\n\nPreparing to create our realtime chart application in Xcode\n\nLaunch Xcode on your Mac and create a new project (call it whatever you want). Follow the new application wizard and create a new Single-page application. Once the project has been created, close Xcode and launch your terminal application.\n\nIn the terminal, cd to the root of the application directory. Then run the command pod init. This will generate a Podfile. Update the contents of the Podfile to the contents below (replace PROJECT_NAME with your project name):\n\n\n\n    platform :ios, \'9.0\'\n    target \'PROJECT_NAME\' do\n      use_frameworks!\n      pod \'Charts\', \'~> 3.0.2\'\n      pod \'PusherSwift\', \'~> 4.1.0\'\n      pod \'Alamofire\', \'~> 4.4.0\'\n    end\n\n\n\n\n\nSave the Podfile and then go to your terminal and run the command: pod install.\n\nRunning this command will install all the third-party packages we need to build our realtime iOS chart application.\n\nThe first package it will install is Charts, which is a package for making beautiful charts on iOS. The second package is the Pusher swift SDK. The last package is Alamofire, a package for making HTTP requests on iOS.\n\nOnce the installation is complete, open the **.xcworkspace** file in your project directory root. This should launch Xcode. Now we are ready to start creating our iOS application.\n\nCreating our realtime chart application views in Xcode\n\nTo begin, we will create the necessary views we need for our realtime chart application. Open the Main.storyboard file and let’s start designing our view.\n\nFirst, create a rectangular view from edge to edge at the top of the View Controller in the storyboard. In that view, add a button and add the title “Simulate Visits”. Next, create another view that is also a rectangle, spanning from the end of the first view above to the bottom of the screen. This view will be where we will render the realtime chart.\n\nWhen you are done creating the views, you should have something like shown in the image below.\n\n\n\nAs it currently stands, the views do nothing. Let us connect some functionality to the iOS chart application view.\n\nAdding basic functionality to our iOS chart application\n\nAs said before, our application’s views and buttons are not connected to our ViewController so let’s fix that.\n\nIn Xcode, while the storyboard is still open, click on the “Show the Assistant Editor” button on the top right of the page to split the view into storyboard and code view. Now, click once on the button you created, and while holding ctrl, click and drag the link to the code editor. Then create an @IBaction as seen in the images below:\n\n\n\n\n\nWhen the link is complete, you should see something like this added to the code editor:\n\n\n\n    @IBAction func simulateButtonPressed(_ sender: Any) {\n    }\n\n\n\n\n\nGreat! Now that you have created the first link, we will have to create one more link to the chart view.\n\nOn your storyboard, click the view and on the “Identity Inspection” tab, make sure the view is connected to LineChartView as seen below.\n\n\n\nNow that the view is connected to a view class, repeat the same as we did before to link the button, only this time instead of creating an @IBAction we will create an @IBOutlet. Images are shown below:\n\n\n\n\n\nWhen the link is complete, you should see something like this added to the code editor:\n\n\n\n    @IBOutlet weak var chartView: LineChartView!\n\n\n\n\n\nFinally, at the top of the ViewController import the Charts package. You can add the code below right under import UIKit in the ViewController.\n\n\n\n    import Charts\n\n\n\n\n\nNow that we have linked both elements to our code, every time the Simulate Visits button is pressed, the simulateButtonPressed function will be called.\n\nAdding realtime functionality to our iOS chart application\n\nThe final piece of the puzzle will be displaying a chart and making it update in realtime across all devices viewing the chart.\n\nTo achieve this, we will do the following:\n\n\nCreate a function that updates our chart depending on the numbers.\nMake our request button call the backend which will in turn send simulated data to Pusher.\nCreate a function that listens for events from Pusher and, when one is received, it triggers the update chart function we created earlier.\n\n\nCreate a trigger function to update our chart\nLet’s create the function that updates our chart depending on the numbers supplied to it. Open the ViewController, and in it declare a class property right under the class declaration. We will use this property to track the visitors:\n\n\n\n    var visitors: [Double] = []\n\n\n\n\n\nNext, we will add the function that will do the actual update to the chart view:\n\n\n\n    private func updateChart() {\n        var chartEntry = [ChartDataEntry]()\n\n        for i in 0..<visitors.count {\n            let value = ChartDataEntry(x: Double(i), y: visitors[i])\n            chartEntry.append(value)\n        }\n\n        let line = LineChartDataSet(values: chartEntry, label: "Visitor")\n        line.colors = [UIColor.green]\n\n        let data = LineChartData()\n        data.addDataSet(line)\n\n        chartView.data = data\n        chartView.chartDescription?.text = "Visitors Count"\n    }\n\n\n\n\n\nIn the code above, we declare chartEntry where we intend to store all our chart data. Then we loop through the available visitors and, for each of them, we add a new ChartDataEntry(x: Double(i), y: visitors[i]) that tells the chart the X and Y positions.\n\nWe set the color the line chart will be displayed in. We create the LineChartData and add the line which contains our data points. Finally, we add the data to the chartView and set the chart view description.\n\nMake our simulate button call an endpoint\nThe next thing we need to do is make our request button trigger a backend which will in turn send simulated data to Pusher.\n\nTo do this, we need to update the view controller one more time. In the ViewController import the Alamofire package right under the Charts package:\n\n\n\n    import Alamofire\n\n\n\n\n\nNow replace the simulateButtonPressed function with the code below:\n\n\n\n    @IBAction func simulateButtonPressed(_ sender: Any) {\n        Alamofire.request("http://localhost:4000/simulate", method: .post).validate().responseJSON { (response) in\n            switch response.result {\n            case .success(_):\n                _ = "Successful"\n            case .failure(let error):\n                print(error)\n            }\n        }\n    }\n\n\n\n\n\nIn the code below, we use Alamofire to send a POST request to http://localhost:4000/simulate which is a local web server (we will create this backend soon). In a real application, this will typically point to a real web server.\n\nThis endpoint does not take any parameters in order to keep the tutorial simple. We also do not need to do anything with the response. We just need the POST request to be sent every time the simulate visits button is pressed.\n\nTie in realtime functionality using Pusher\nTo make all this work, we will create a function that listens for events from Pusher and, when one is received, we save the value to visitors and then trigger the update chart function we created earlier.\n\nTo do this, open the ViewController and import the PusherSwift SDK under the Alamofire package at the top:\n\n\n\n    import PusherSwift\n\n\n\n\n\nNext, we will declare a class property for the Pusher instance. We can do this right under the visitors declaration line:\n\n\n\n    var pusher: Pusher!\n\n\n\n\n\nThen after declaring the property, we need to add the function below to the class so it can listen to the events:\n\n\n\n    private func listenForChartUpdates() {\n        pusher = Pusher(key: "PUSHER_KEY", options: PusherClientOptions(host: .cluster("PUSHER_CLUSTER")))\n\n        let channel = pusher.subscribe("visitorsCount")\n\n        channel.bind(eventName: "addNumber", callback: { (data: Any?) -> Void in\n            if let data = data as? [String: AnyObject] {\n                let count = data["count"] as! Double\n                self.visitors.append(count)\n                self.updateChart()\n            }\n        })\n\n        pusher.connect()\n    } \n\n\n\n\n\nIn the code above, we instantiate Pusher and pass in our key and the cluster (you can get your key and cluster from your Pusher application’s dashboard). We then subscribe to the visitorsChannel and bind to the event name addNumber on that channel.\n\nWhen the event is triggered, we fire the logic in the callback which simply appends the count to visitors and then calls the updateChart function, which updates the actual Chart in realtime.\n\nFinally we call pusher.connect() which forms the connection to Pusher.\n\nIn the viewDidLoad function just add a call to the listenForChartUpdates method:\n\n\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        // ...stuff    \n\n        listenForChartUpdates()\n    }\n\n\n\n\n\nThat’s all! We have created our application in Xcode and we are ready for testing. However, to test, we need to create the backend that we send a POST request to when the button is clicked. To create this backend, we will be using Node.js. Let’s do that now.\n\nCreating the backend service for our realtime iOS chart application\n\nTo get started, create a directory for the web application and then create some new files inside the directory:\n\nFile: index.js\n\n\n\n    // -------------------------------------------------------\n    // Require Node dependencies\n    // -------------------------------------------------------\n\n    let Pusher     = require(\'pusher\');\n    let express    = require(\'express\');\n    let bodyParser = require(\'body-parser\');\n    let app        = express();\n\n    // Instantiate Pusher\n    let pusher     = new Pusher(require(\'./config.js\'));\n\n    // -------------------------------------------------------\n    // Load express middlewares\n    // -------------------------------------------------------\n\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n\n    // -------------------------------------------------------\n    // Simulate multiple changes to the visitor count value,\n    // this way the chart will always update with different\n    // values.\n    // -------------------------------------------------------\n\n    app.post(\'/simulate\', (req, res, next) => {\n      var loopCount = 0;\n      let sendToPusher = setInterval(function(){\n        let count = Math.floor((Math.random() * (100 - 1)) + 1)\n        pusher.trigger(\'visitorsCount\', \'addNumber\', {count:count})\n        loopCount++;\n        if (loopCount === 20) {\n          clearInterval(sendToPusher);\n        }\n      }, 2000);\n      res.json({success: 200})\n    })\n\n\n    // Handle index\n    app.get(\'/\', (req, res) => {\n      res.json("It works!");\n    });\n\n    // Handle 404\'s\n    app.use((req, res, next) => {\n        let err = new Error(\'Not Found\');\n        err.status = 404;\n        next(err);\n    });\n\n    // -------------------------------------------------------\n    // Serve application\n    // -------------------------------------------------------\n\n    app.listen(4000, function(){\n        console.log(\'App listening on port 4000!\')\n    });\n\n\n\n\n\nThe file above is a simple Express application written in JavaScript. We instantiate all the packages we require and configure pusher using a config file we will create soon. Then we create a route /simulate and in this route we trigger the addNumber event in the visitorCount channel. This is the same channel and event the application is listening for.\n\nTo make it a little easier, we use setInterval to send a random visitor count to the Pusher backend every 2000 milliseconds. After looping for 20 times, the loop stops. This should be sufficient to test our application.\n\nCreate the next file config.js:\n\n\n\n    module.exports = {\n        appId: \'PUSHER_APP_ID\',\n        key: \'PUSHER_APP_KEY\',\n        secret: \'PUSHER_APP_SECRET\',\n        cluster: \'PUSHER_APP_CLUSTER\',\n    };\n\n\n\n\n\nReplace the PUSHER_APP_* keys with the credentials from your own Pusher application.\n\nThe next and final file is package.json:\n\n\n\n    {\n      "main": "index.js",\n      "dependencies": {\n        "body-parser": "^1.16.0",\n        "express": "^4.14.1",\n        "pusher": "^1.5.1"\n      }\n    }\n\n\n\n\n\nIn this file we simply declare dependencies.\n\nNow open terminal and cd to the root of the web application directory and run the commands below to install the NPM dependencies and run the application respectively:\n\n\n\n    $ npm install\n    $ node index.js\n\n\n\n\n\nWhen installation is complete and the application is ready you should see the output below:\n\n\n\nTesting the application\n\nOnce you have your local node web server running, you will need to make some changes so your application can talk to the local web server. In the info.plist file, make the following changes:\n\n\n\nWith this change, you can build and run your application and it will talk directly with your local web application.\n\nConclusion\n\nThis article has shown you how you can combine Pusher and the Charts package to create a realtime iOS chart application. There are many other chart types you can create using the package but, for brevity, we have done the easiest. You can explore the other chart types and even pass in multiple data points per request.\n\nIf you have any questions, feedback or corrections, you can post them in the comments section below. The source code to the tutorial above is available on GitHub.\n\nThis post first appeared on the Pusher blog.',
    guid: 'https://dev.to/neo/how-to-build-a-realtime-chart-in-ios--42g5',
    isoDate: '2018-03-02T23:25:15.000Z' },
  { creator: 'themlsmith',
    title: 'Debugging JavaScript with Source Maps ',
    link: 'https://dev.to/themlsmith/debugging-javascript-with-source-maps--5bie',
    pubDate: 'Fri, 02 Mar 2018 22:55:25 +0000',
    author: 'themlsmith',
    content: '\n\n<p>One of the frustrating situations I often encounter when debugging JavaScript, is tracking down <strong><a href="/error-tracking/javascript/">JavaScript errors</a></strong> to <strong><em>line 23 col 63475</em></strong>. I felt as though I was right on the edge of seeing the offending code and being able to fix it. And then, reality came crashing down. I realized that I’ve managed to debug myself right into the middle of a minified JavaScript file 😞.</p>\n\n<p>There is a better way - Source Maps. JavaScript source maps are the key to taking what you’ve narrowed down in the minified code, and then being able to map them back to the source code so that you can view and resolve the problem without having to figure it out in the minified code.</p>\n\n<p><strong><a href="https://www.html5rocks.com/en/tutorials/developertools/sourcemaps/">Source maps</a></strong> are generated when JavaScript code is minified. By using the source map in production, you can trace your problems back to the exact line of source code. It also allows you to use your browser\'s developer console to step through the source code when debugging problems. We’ll look at how to generate a source map, and then we’ll look at how they work, and how we can use them to make our lives easier.</p>\n\n<p>You can download or clone the source for the following demo from <strong><a href="https://github.com/echovue/javascript-calculator">https://github.com/echovue/javascript-calculator</a></strong>. The source includes the original JavaScript file, the minified JavaScript file, and the source map. If you already know how to generate a source map or just want to use the generated file, you can skip down to <strong><a href="#how-do-source-maps-work">How Do Source Maps Work?</a></strong></p>\n\n<h2>Generating a Source Map</h2>\n\n<p>For this example, I’m going to be using a simple JavaScript application. Keeping it simple will help keep the demo manageable, and the concepts apply to any application, no matter the size.</p>\n\n<p>The first thing that we’ll need is a tool to minify the code. I’m going to use <code>UglifyJS</code>, but most tools should support the ability to generate a production source map as part of the minification process. You can install <code>UglifyJS</code> with npm if you have that installed on your workstation.</p>\n\n\n\n<div class="highlight"><pre class="highlight shell"><code><span class="nv">$ </span>npm <span class="nb">install </span>uglify-js <span class="nt">-g</span>\n</code></pre></div>\n\n\n\n<p>You can then validate installation by executing the following:</p>\n\n\n\n<div class="highlight"><pre class="highlight shell"><code><span class="nv">$ </span>uglifyjs <span class="nt">--version</span>\nuglify-js 3.2.0\n</code></pre></div>\n\n\n\n<p>In some cases, you may have to add the installation folder to your path.</p>\n\n<p>Now that we have <code>uglifyjs</code> installed and we’ve verified that it works, let’s minify our code. If you’re using the example project, this command will overwrite the existing minified file and source map.</p>\n\n<p>From the JS folder of the demo project, enter the following command.</p>\n\n\n\n<div class="highlight"><pre class="highlight shell"><code><span class="nv">$ </span>uglifyjs calculator.js <span class="nt">--compress</span> <span class="nt">--mangle</span> <span class="nt">--source-map</span> <span class="nt">--output</span> calculator.min.js\n</code></pre></div>\n\n\n\n<p>This command takes our JavaScript file <code>calculator.js</code> and converts it to a minified version <code>calculator.min.js</code>, along with a source map <code>calculator.min.js.map</code>. Even with this small file, the minification process reduces the size of the file from 4KB to 1KB.</p>\n\n<h2>How do Source Maps Work?</h2>\n\n<p>Let’s open up the source map file to see what it has in it. I used a JSON parser to format it for easy reading, and shortened some of the lines with ellipses as well.</p>\n\n\n\n<div class="highlight"><pre class="highlight json"><code><span class="p">{</span><span class="w">\n  </span><span class="s2">"version"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="mi">3</span><span class="p">,</span><span class="w">\n  </span><span class="s2">"sources"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="err">calculator.js</span><span class="p">],</span><span class="w">\n  </span><span class="s2">"names"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="err">resultNum</span><span class="p">,</span><span class="err">operator</span><span class="p">,</span><span class="err">el</span><span class="p">,</span><span class="err">element</span><span class="p">,</span><span class="err">charAt</span><span class="p">,</span><span class="err">document</span><span class="p">,</span><span class="err">querySelector</span><span class="p">,</span><span class="err">...</span><span class="p">],</span><span class="w">\n  </span><span class="s2">"mappings"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="err">CAAC</span><span class="p">,</span><span class="err">WACC</span><span class="p">,</span><span class="err">aAyGA</span><span class="p">,</span><span class="err">IAAK</span><span class="p">,</span><span class="err">IAvFHA</span><span class="p">,</span><span class="err">EACAC</span><span class="p">,</span><span class="err">EAhBEC</span><span class="p">,</span><span class="err">EAAK</span><span class="p">,</span><span class="err">SAASC</span><span class="p">,</span><span class="err">GAChB</span><span class="p">,</span><span class="err">MAA</span><span class="mi">0</span><span class="err">B</span><span class="p">,</span><span class="err">MAAtBA</span><span class="p">,</span><span class="err">...</span><span class="w">\n</span><span class="p">}</span><span class="w">\n</span></code></pre></div>\n\n\n\n<p>The file specifies the mapping version used and identifies the source files and names of parameters. The useful part is the mappings, although unfortunately since they are in Base 64 VLQ, they’re not very useful for the human brain.</p>\n\n<p>If you’d like to understand more about how the mappings work, and how they translate the minified code back to the source, I’d recommend reading <strong><a href="http://www.mattzeunert.com/2016/02/14/how-do-source-maps-work.html">How do source maps work</a></strong>. For now, let’s look at how to leverage the source map in production to make debugging easier.</p>\n\n<p>If you open the <code>index.html</code> in Chrome or your browser of choice, you’ll notice that there is a JavaScript error which is thrown on the first line of our minified file. Let’s make it easier to identify and resolve this.</p>\n\n<p><a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nc_Q4x8L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://rollbar.com/assets/blog/images/source-maps/can-not-set-property.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nc_Q4x8L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://rollbar.com/assets/blog/images/source-maps/can-not-set-property.png" alt="Screenshot of Uncought TypeError: can not set property"></a></p>\n\n<p><em>Error within the minified JavaScript file</em></p>\n\n<p><strong>Note:</strong> To complete the next set of steps, you will need to have the JavaScript-calculator web application running on a publicly accessible web server. For this demo, I created an AWS instance, installed an Apache Web Server, and served the web application from there.</p>\n\n<h2>Working with Source Maps in Production</h2>\n\n<p>When you’re debugging a production application, it gets trickier since production servers often don’t serve source maps. Do you want to make it easier for people you don’t know to see your raw source code? Fortunately, Rollbar supports using source maps to get meaningful stack traces while still using minified JavaScript in production.</p>\n\n<p>Rollbar provides real-time <strong><a href="/features/">production error monitoring</a></strong> with support for most programming languages and frameworks, including <strong><a href="/error-tracking/javascript">JavaScript</a></strong>, <strong><a href="/error-tracking/angular">Angular</a></strong>, <strong><a href="/error-tracking/node.js">Node</a></strong>, React, etc. Because <strong><a href="https://github.com/rollbar/rollbar.js/"><code>rollbar,js</code></a></strong> supports source maps, you can see the line of exact code where each error originated along with the stack trace. Let’s dive into an example of how it works.</p>\n\n<p>Once you have <strong><a href="/signup/">created an account</a></strong> and your first project, you’ll be given a client-side access token. Add the script included in the <strong>Quick start browser</strong> section inside the <code>&lt;HEAD&gt;</code> tag in <code>index.html</code>.</p>\n\n<p>You can upload your source maps via the <strong><a href="/docs/">API</a></strong>. Usually, we would use a script do this automatically at deployment time, but we will do it manually for this tutorial. From the root folder of the web application project, execute the following curl command after updating the access token and the minified_url to your token and URL:</p>\n\n\n\n<div class="highlight"><pre class="highlight shell"><code><span class="nv">$ </span>curl https://api.rollbar.com/api/1/sourcemap <span class="se">\\</span>\n<span class="nt">-F</span> <span class="nv">access_token</span><span class="o">=</span>8888888888888888888888888 <span class="se">\\</span>\n<span class="nt">-F</span> <span class="nv">version</span><span class="o">=</span>0.0.1 <span class="se">\\</span>\n<span class="nt">-F</span> <span class="nv">minified_url</span><span class="o">=</span>http://ec2-52-43-138-168.us-west-2.compute.amazonaws.com/javascript-calculator/js/calculator.min.js <span class="se">\\</span>\n<span class="nt">-F</span> <span class="nv">source_map</span><span class="o">=</span>@js/calculator.min.js.map <span class="se">\\</span>\n<span class="nt">-F</span> calculator.js<span class="o">=</span>@js/calculator.js\n</code></pre></div>\n\n\n\n<p>Once that is done, clicking on an error should take you to a page with the stack trace. Here we can see the proper source code with files and line numbers.</p>\n\n<p><a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3fWGrnhP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://rollbar.com/assets/blog/images/source-maps/Can-not-set-property-onClick-null.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3fWGrnhP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://rollbar.com/assets/blog/images/source-maps/Can-not-set-property-onClick-null.png" alt="Screenshot of Uncaught TypeError : Can not set property onClick null"></a></p>\n\n<p><em>Stack trace showing the original source code</em></p>\n\n<p>When you click the source file link, it will open to the file and line number in <strong><a href="/docs/source-control">GitHub, BitBucket, or Gitlab</a></strong>. There, you can use the tools to see what changes were made and when. To learn more, check out the <strong><a href="/docs/source-maps/">source maps documentation</a></strong> for additional details and config options.</p>\n\n<h3>Tips for using source maps in production and debugging with Rollbar</h3>\n\n<ul>\n<li>Don\'t forget to update the version number when you update your JavaScript. If you don\'t, the filename, line and column numbers will be incorrect. </li>\n<li>The value of <code>minified_url</code> must be the full URL of the minified file. This should start with <code>http:</code> or <code>https:</code>, which we\'ll strip off.</li>\n<li>Make sure you\'re not missing one or both of the config params in the on-page JavaScript snippet. Set both <code>payload.client.javascript.source_map_enabled</code> and <code>payload.client.javascript.code_version</code>.</li>\n<li>If you\'re using the upload method, check to be sure that the <code>code_version</code> used in the on-page snippet matches the version provided in the upload call.</li>\n<li>If you\'re using the download method, make sure your source map file or minified JavaScript source files are on a host that\'s reachable from the public internet and are not gated behind an authorization wall.</li>\n<li>If the JavaScript error that you are expecting to be un-minified does not have column numbers, and you haven\'t enabled <code>guess_uncaught_frames</code>, we won\'t be able to apply the source map. We need column numbers to be able to apply the source map without guessing.</li>\n<li>If your source map file combines multiple sub-maps into "sections" within the top level map, we, unfortunately, don\'t yet support this source map format (but we are planning to soon).</li>\n</ul>\n\n<h2>TL;DR</h2>\n\n<p>In conclusion, source maps help you debug production code right in your browser\'s developer console. They tell you the exact file and line number when there is an error, and make it natural to use the debugging feature within your browser to step through the code. This makes it much easier to find the root cause of problems and fix them quickly. When monitoring production systems, make sure to choose solutions like Rollbar that support source maps and make debugging production super easy.</p>\n\n\n\n\n<p><em>Note: This was originally published on <a href="https://rollbar.com/blog/top-10-javascript-errors/">Rollbar\'s blog</a>.</em></p>\n\n\n',
    contentSnippet: 'One of the frustrating situations I often encounter when debugging JavaScript, is tracking down JavaScript errors to line 23 col 63475. I felt as though I was right on the edge of seeing the offending code and being able to fix it. And then, reality came crashing down. I realized that I’ve managed to debug myself right into the middle of a minified JavaScript file 😞.\n\nThere is a better way - Source Maps. JavaScript source maps are the key to taking what you’ve narrowed down in the minified code, and then being able to map them back to the source code so that you can view and resolve the problem without having to figure it out in the minified code.\n\nSource maps are generated when JavaScript code is minified. By using the source map in production, you can trace your problems back to the exact line of source code. It also allows you to use your browser\'s developer console to step through the source code when debugging problems. We’ll look at how to generate a source map, and then we’ll look at how they work, and how we can use them to make our lives easier.\n\nYou can download or clone the source for the following demo from https://github.com/echovue/javascript-calculator. The source includes the original JavaScript file, the minified JavaScript file, and the source map. If you already know how to generate a source map or just want to use the generated file, you can skip down to How Do Source Maps Work?\n\nGenerating a Source Map\n\nFor this example, I’m going to be using a simple JavaScript application. Keeping it simple will help keep the demo manageable, and the concepts apply to any application, no matter the size.\n\nThe first thing that we’ll need is a tool to minify the code. I’m going to use UglifyJS, but most tools should support the ability to generate a production source map as part of the minification process. You can install UglifyJS with npm if you have that installed on your workstation.\n\n\n\n$ npm install uglify-js -g\n\n\n\n\nYou can then validate installation by executing the following:\n\n\n\n$ uglifyjs --version\nuglify-js 3.2.0\n\n\n\n\nIn some cases, you may have to add the installation folder to your path.\n\nNow that we have uglifyjs installed and we’ve verified that it works, let’s minify our code. If you’re using the example project, this command will overwrite the existing minified file and source map.\n\nFrom the JS folder of the demo project, enter the following command.\n\n\n\n$ uglifyjs calculator.js --compress --mangle --source-map --output calculator.min.js\n\n\n\n\nThis command takes our JavaScript file calculator.js and converts it to a minified version calculator.min.js, along with a source map calculator.min.js.map. Even with this small file, the minification process reduces the size of the file from 4KB to 1KB.\n\nHow do Source Maps Work?\n\nLet’s open up the source map file to see what it has in it. I used a JSON parser to format it for easy reading, and shortened some of the lines with ellipses as well.\n\n\n\n{\n  "version" : 3,\n  "sources" : [calculator.js],\n  "names" : [resultNum,operator,el,element,charAt,document,querySelector,...],\n  "mappings" : CAAC,WACC,aAyGA,IAAK,IAvFHA,EACAC,EAhBEC,EAAK,SAASC,GAChB,MAA0B,MAAtBA,...\n}\n\n\n\n\nThe file specifies the mapping version used and identifies the source files and names of parameters. The useful part is the mappings, although unfortunately since they are in Base 64 VLQ, they’re not very useful for the human brain.\n\nIf you’d like to understand more about how the mappings work, and how they translate the minified code back to the source, I’d recommend reading How do source maps work. For now, let’s look at how to leverage the source map in production to make debugging easier.\n\nIf you open the index.html in Chrome or your browser of choice, you’ll notice that there is a JavaScript error which is thrown on the first line of our minified file. Let’s make it easier to identify and resolve this.\n\n\n\nError within the minified JavaScript file\n\nNote: To complete the next set of steps, you will need to have the JavaScript-calculator web application running on a publicly accessible web server. For this demo, I created an AWS instance, installed an Apache Web Server, and served the web application from there.\n\nWorking with Source Maps in Production\n\nWhen you’re debugging a production application, it gets trickier since production servers often don’t serve source maps. Do you want to make it easier for people you don’t know to see your raw source code? Fortunately, Rollbar supports using source maps to get meaningful stack traces while still using minified JavaScript in production.\n\nRollbar provides real-time production error monitoring with support for most programming languages and frameworks, including JavaScript, Angular, Node, React, etc. Because rollbar,js supports source maps, you can see the line of exact code where each error originated along with the stack trace. Let’s dive into an example of how it works.\n\nOnce you have created an account and your first project, you’ll be given a client-side access token. Add the script included in the Quick start browser section inside the <HEAD> tag in index.html.\n\nYou can upload your source maps via the API. Usually, we would use a script do this automatically at deployment time, but we will do it manually for this tutorial. From the root folder of the web application project, execute the following curl command after updating the access token and the minified_url to your token and URL:\n\n\n\n$ curl https://api.rollbar.com/api/1/sourcemap \\\n-F access_token=8888888888888888888888888 \\\n-F version=0.0.1 \\\n-F minified_url=http://ec2-52-43-138-168.us-west-2.compute.amazonaws.com/javascript-calculator/js/calculator.min.js \\\n-F source_map=@js/calculator.min.js.map \\\n-F calculator.js=@js/calculator.js\n\n\n\n\nOnce that is done, clicking on an error should take you to a page with the stack trace. Here we can see the proper source code with files and line numbers.\n\n\n\nStack trace showing the original source code\n\nWhen you click the source file link, it will open to the file and line number in GitHub, BitBucket, or Gitlab. There, you can use the tools to see what changes were made and when. To learn more, check out the source maps documentation for additional details and config options.\n\nTips for using source maps in production and debugging with Rollbar\n\n\nDon\'t forget to update the version number when you update your JavaScript. If you don\'t, the filename, line and column numbers will be incorrect. \nThe value of minified_url must be the full URL of the minified file. This should start with http: or https:, which we\'ll strip off.\nMake sure you\'re not missing one or both of the config params in the on-page JavaScript snippet. Set both payload.client.javascript.source_map_enabled and payload.client.javascript.code_version.\nIf you\'re using the upload method, check to be sure that the code_version used in the on-page snippet matches the version provided in the upload call.\nIf you\'re using the download method, make sure your source map file or minified JavaScript source files are on a host that\'s reachable from the public internet and are not gated behind an authorization wall.\nIf the JavaScript error that you are expecting to be un-minified does not have column numbers, and you haven\'t enabled guess_uncaught_frames, we won\'t be able to apply the source map. We need column numbers to be able to apply the source map without guessing.\nIf your source map file combines multiple sub-maps into "sections" within the top level map, we, unfortunately, don\'t yet support this source map format (but we are planning to soon).\n\n\nTL;DR\n\nIn conclusion, source maps help you debug production code right in your browser\'s developer console. They tell you the exact file and line number when there is an error, and make it natural to use the debugging feature within your browser to step through the code. This makes it much easier to find the root cause of problems and fix them quickly. When monitoring production systems, make sure to choose solutions like Rollbar that support source maps and make debugging production super easy.\n\n\n\n\nNote: This was originally published on Rollbar\'s blog.',
    guid: 'https://dev.to/themlsmith/debugging-javascript-with-source-maps--5bie',
    isoDate: '2018-03-02T22:55:25.000Z' },
  { creator: 'Adekoyejo Akinhanmi',
    title: 'Microservice data sharing and communication ',
    link: 'https://dev.to/senornigeria/microservice-data-sharing-and-communication--5gn4',
    pubDate: 'Fri, 02 Mar 2018 22:39:43 +0000',
    author: 'Adekoyejo Akinhanmi',
    content: '\n\n<p>Hello,</p>\n\n<p>I really want thoughts from anyone who wants to on microservice architecture. It can be language agnostic but it\'s probably noteworthy that I am using SailsJS on Node Express. I would really appreciate some personal experience as well.</p>\n\n<p>I would like to know:</p>\n\n<ol>\n<li><p>When a service provides information to other services, how does one manage communication between them? Do you use REST, Message queuing? What\'s best?</p></li>\n<li><p>When data needs to be shared across services, for example to prevent sharing of tables, is it good practice to create a relationship table?</p></li>\n</ol>\n\n<p>Thank you.</p>\n\n\n',
    contentSnippet: 'Hello,\n\nI really want thoughts from anyone who wants to on microservice architecture. It can be language agnostic but it\'s probably noteworthy that I am using SailsJS on Node Express. I would really appreciate some personal experience as well.\n\nI would like to know:\n\n\nWhen a service provides information to other services, how does one manage communication between them? Do you use REST, Message queuing? What\'s best?\nWhen data needs to be shared across services, for example to prevent sharing of tables, is it good practice to create a relationship table?\n\n\nThank you.',
    guid: 'https://dev.to/senornigeria/microservice-data-sharing-and-communication--5gn4',
    isoDate: '2018-03-02T22:39:43.000Z' },
  { creator: 'Patricio Cano',
    title: 'On résumés and applying to jobs ',
    link: 'https://dev.to/supernova32/on-rsums-and-applying-tojobs--4oha',
    pubDate: 'Fri, 02 Mar 2018 22:29:29 +0000',
    author: 'Patricio Cano',
    content: '\n\n<p><a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SOtYzlDi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1454165804606-c3d57bc86b40" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SOtYzlDi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1454165804606-c3d57bc86b40" alt=""></a></p>\n\n<p>I’ve been thinking about writing this post for a while, specially after my short stint as a hiring manager for the Service Engineer position at GitLab. What finally notched me was this tweet by Stephanie Hurlburt where she asked her followers if they wanted their résumés reviewed. I realized it made sense to write some advice around this topic, and not just for résumés, but for applying to a job in general. So, let’s begin…</p>\n\n\n\n\n<h3>Keep it short</h3>\n\n<p>While looking through resumes for the Service Engineer position at GitLab, I came across a high number of résumés that where more than 4 pages long.<br>\nIt is not necessary to list every single thing you have done in your résumé. List your most proud achievement first (if it’s relevant to the position), and follow up with the most recent positions you have held. Try to keep it single page, 2 pages at most. The people reviewing your résumé have a whole pile of them to go through. It helps if it’s short. I have seen profiles being discarded just because the résumé was too long, and they didn’t even give a glance to it.</p>\n\n<h3>Tailor your résumé to each position</h3>\n\n<p>It is highly encouraged to tailor your résumé to the company and the position to which you are applying. This way you can showcase the particular skills you already have that match perfectly with the open position. List them first, or close to the top, and add information about projects on which you have worked that are relevant to the requirements.</p>\n\n<h3>Personal information should be at the top</h3>\n\n<p>Your personal information should be highly visible, preferably at the top of the document, and it should stand out. Use colors to highlight and contrast this information.</p>\n\n<h3>Education should be further down</h3>\n\n<p>Unless highly relevant to the position, education can go further down. It usually suffices to say the highest degree you have attained, no need to list specific courses and grades, unless, again, it’s highly relevant to the position. In this section you can also list the languages you speak, certificates you have attained, etc.</p>\n\n<h3>Add something interesting about yourself</h3>\n\n<p>At the very end, add something interesting about yourself. Something that might let the hiring manager relate a bit to you.</p>\n\n<h3>Use LaTeX, or InDesign for the layout</h3>\n\n<p>Make your résumé shine! There are amazing résumé templates available that you can easily tailor to your needs, so you really outshine the competition. Word has gotten better in later versions, but it still cannot hold a candle to what you can do with LaTeX, or InDesign.</p>\n\n<h3>Always submit your résumé as a PDF</h3>\n\n<p>PDF, PDF, PDF! It is called Portable Document File for something. It renders pretty much the same way on any machine. A Word, or other word processing document has its own weird way of rendering a document. It will most likely look different in my computer than it does on yours. I might not have the proper fonts, and the layout will get really screwed. This is a no-go. Always submit your résumé as a PDF.</p>\n\n<h3>Your GitHub profile is not a résumé</h3>\n\n<p>Having a lot of toy projects or tutorial projects on your GitHub profile and submitting that instead of a proper résumé will be detrimental to your application. These types of projects do not showcase your ability to work with other developers, or to grasp complex code, or that you actually have vast knowledge of the framework in which your toy projects are written.</p>\n\n<p>On the other hand, if you contribute to open source projects, in whatever form (documentation, issue triaging, helping people out on the issues or other forums, etc.) now this does showcase your ability to work with other developers, or to communicate complex subjects, or to prioritize. This kind of contributions can be more appealing to potential employers.</p>\n\n<p>Now I know there are great developers that are not able to contribute to open source. If that is the case for you, have some code samples of work that highlights your abilities, so that you can send to the technical interviewers upon request.</p>\n\n<h3>Use LinkedIn</h3>\n\n<p>A lot of people seem to hate on LinkedIn, but it is a tool that is used by a lot of recruiters. Keep your profile updated, with your latest skills, your latest projects, your education, etc., and you might get job leads just for having a profile. A lot of recruiting software also allows you to pre-fill information on the application form from your LinkedIn profile, so it will save you some time.<br>\nKeep it updated!</p>\n\n\n\n\n<p>After you have the perfect résumé, it is time to apply to the job opening, which it’s actually the most important part. No point on having the best résumé ever, if no one will see it.</p>\n\n<h1>Write a cover letter</h1>\n\n<p>Nowadays most openings require you to write a cover letter, but even if they don’t, you should always submit one. This is your moment to shine! It is a freeform letter in which you get to tell them who you are in your own words. Put some thought into it, and take your time. A great cover letter can be more valuable that a résumé.<br>\nWrite about what makes you you, what inspires you, what excites you, and tailor it to each specific position. Showcase what you’ve done in a way that is relevant to the open position and makes you stand out.</p>\n\n<h3>If possible, have a personal blog</h3>\n\n<p>Having a personal blog can only benefit you. It can show your ability explain complex topics in understandable ways, your communication skills, etc. It is also a great indicator that you will most likely be able to write good documentation.</p>\n\n\n\n\n<p>This is feedback that I have gather over the past 4 years of applying to different jobs, from my short stint as a hiring manager, and from watching other hiring managers at companies I’ve worked at. This is just my humble opinion, and should not be construed as professional advice, though. And with that I bid you good luck on the job hunt! 👍</p>\n\n\n',
    contentSnippet: 'I’ve been thinking about writing this post for a while, specially after my short stint as a hiring manager for the Service Engineer position at GitLab. What finally notched me was this tweet by Stephanie Hurlburt where she asked her followers if they wanted their résumés reviewed. I realized it made sense to write some advice around this topic, and not just for résumés, but for applying to a job in general. So, let’s begin…\n\n\n\n\nKeep it short\n\nWhile looking through resumes for the Service Engineer position at GitLab, I came across a high number of résumés that where more than 4 pages long.\nIt is not necessary to list every single thing you have done in your résumé. List your most proud achievement first (if it’s relevant to the position), and follow up with the most recent positions you have held. Try to keep it single page, 2 pages at most. The people reviewing your résumé have a whole pile of them to go through. It helps if it’s short. I have seen profiles being discarded just because the résumé was too long, and they didn’t even give a glance to it.\n\nTailor your résumé to each position\n\nIt is highly encouraged to tailor your résumé to the company and the position to which you are applying. This way you can showcase the particular skills you already have that match perfectly with the open position. List them first, or close to the top, and add information about projects on which you have worked that are relevant to the requirements.\n\nPersonal information should be at the top\n\nYour personal information should be highly visible, preferably at the top of the document, and it should stand out. Use colors to highlight and contrast this information.\n\nEducation should be further down\n\nUnless highly relevant to the position, education can go further down. It usually suffices to say the highest degree you have attained, no need to list specific courses and grades, unless, again, it’s highly relevant to the position. In this section you can also list the languages you speak, certificates you have attained, etc.\n\nAdd something interesting about yourself\n\nAt the very end, add something interesting about yourself. Something that might let the hiring manager relate a bit to you.\n\nUse LaTeX, or InDesign for the layout\n\nMake your résumé shine! There are amazing résumé templates available that you can easily tailor to your needs, so you really outshine the competition. Word has gotten better in later versions, but it still cannot hold a candle to what you can do with LaTeX, or InDesign.\n\nAlways submit your résumé as a PDF\n\nPDF, PDF, PDF! It is called Portable Document File for something. It renders pretty much the same way on any machine. A Word, or other word processing document has its own weird way of rendering a document. It will most likely look different in my computer than it does on yours. I might not have the proper fonts, and the layout will get really screwed. This is a no-go. Always submit your résumé as a PDF.\n\nYour GitHub profile is not a résumé\n\nHaving a lot of toy projects or tutorial projects on your GitHub profile and submitting that instead of a proper résumé will be detrimental to your application. These types of projects do not showcase your ability to work with other developers, or to grasp complex code, or that you actually have vast knowledge of the framework in which your toy projects are written.\n\nOn the other hand, if you contribute to open source projects, in whatever form (documentation, issue triaging, helping people out on the issues or other forums, etc.) now this does showcase your ability to work with other developers, or to communicate complex subjects, or to prioritize. This kind of contributions can be more appealing to potential employers.\n\nNow I know there are great developers that are not able to contribute to open source. If that is the case for you, have some code samples of work that highlights your abilities, so that you can send to the technical interviewers upon request.\n\nUse LinkedIn\n\nA lot of people seem to hate on LinkedIn, but it is a tool that is used by a lot of recruiters. Keep your profile updated, with your latest skills, your latest projects, your education, etc., and you might get job leads just for having a profile. A lot of recruiting software also allows you to pre-fill information on the application form from your LinkedIn profile, so it will save you some time.\nKeep it updated!\n\n\n\n\nAfter you have the perfect résumé, it is time to apply to the job opening, which it’s actually the most important part. No point on having the best résumé ever, if no one will see it.\n\nWrite a cover letter\n\nNowadays most openings require you to write a cover letter, but even if they don’t, you should always submit one. This is your moment to shine! It is a freeform letter in which you get to tell them who you are in your own words. Put some thought into it, and take your time. A great cover letter can be more valuable that a résumé.\nWrite about what makes you you, what inspires you, what excites you, and tailor it to each specific position. Showcase what you’ve done in a way that is relevant to the open position and makes you stand out.\n\nIf possible, have a personal blog\n\nHaving a personal blog can only benefit you. It can show your ability explain complex topics in understandable ways, your communication skills, etc. It is also a great indicator that you will most likely be able to write good documentation.\n\n\n\n\nThis is feedback that I have gather over the past 4 years of applying to different jobs, from my short stint as a hiring manager, and from watching other hiring managers at companies I’ve worked at. This is just my humble opinion, and should not be construed as professional advice, though. And with that I bid you good luck on the job hunt! 👍',
    guid: 'https://dev.to/supernova32/on-rsums-and-applying-tojobs--4oha',
    isoDate: '2018-03-02T22:29:29.000Z' },
  { creator: 'Jason Yu',
    title: 'Here is a little script to grab a list of all font names on Google Fonts. ',
    link: 'https://dev.to/ycmjason/here-is-a-little-script-to-grab-a-list-of-all-font-names-on-google-fonts--4b81',
    pubDate: 'Fri, 02 Mar 2018 21:58:02 +0000',
    author: 'Jason Yu',
    content: '\n\n<h2>Background</h2>\n\n<p>So if you have already read my previous post about <a href="https://github.com/faviator/faviator">faviator</a>, you might have visited the <a href="https://www.faviator.xyz/playground">faviator playground</a>.</p>\n\n\n<div class="ltag__link">\n        <a href="/ycmjason" class="ltag__link__link">\n          <div class="ltag__link__pic">\n            <img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SyF3SgmN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--rqJfSvwp--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://thepracticaldev.s3.amazonaws.com/uploads/user/profile_image/35023/b6431faf-9cc3-4467-b288-d8e0ced6adb0.jpeg" alt="ycmjason image">\n          </div></a>\n          <a href="/ycmjason/introducing-faviator-a-simple-easy-favicon-generator-32g5" class="ltag__link__link">\n            <div class="ltag__link__content">\n              <h2>Introducing Faviator: A simple easy favicon generator</h2>\n              <h3>Jason Yu</h3>\n              <div class="ltag__link__taglist">\n<span class="ltag__link__tag">#favicon</span><span class="ltag__link__tag">#showdev</span><span class="ltag__link__tag">#opensource</span><span class="ltag__link__tag">#npm</span>\n</div>\n            </div>\n        </a>\n      </div>\n\n\n<p>I am very grateful to have received 19 stars (including my own star) on <a href="https://github.com/faviator/faviator">GitHub</a> last week. My first goal for this project is to collect 100 stars, so please be generous.</p>\n\n<p>This week has been very exciting, I have got a few <a href="https://github.com/faviator/faviator/issues?q=is%3Aissue+is%3Aclosed">issues</a> raised on github which implies that somebody is actually using faviator! Yay!</p>\n\n<p>I heard some feedback regarding the faviator playground. One of which suggests to provide a dropdown to make font style selecting easier.</p>\n\n<p>So I decided to work on this one first. </p>\n\n<h2>Exploring Google Font API</h2>\n\n<p>The <a href="https://developers.google.com/fonts/docs/developer_api">Google Font API</a> is a very simple API. The API has only one endpoint which returns all font information given your API key.</p>\n\n\n\n<div class="highlight"><pre class="highlight plaintext"><code>https://www.googleapis.com/webfonts/v1/webfonts?key=YOUR-API-KEY\n</code></pre></div>\n\n\n\n<p>You can generate your own API key <a href="https://developers.google.com/fonts/docs/developer_api">here</a>. The endpoint above return something like the following.</p>\n\n\n\n<div class="highlight"><pre class="highlight plaintext"><code>{\n  "kind": "webfonts#webfontList",\n  "items": [\n    {\n      "kind": "webfonts#webfont",\n      "family": "ABeeZee",\n      "category": "sans-serif",\n      "variants": [\n        "regular",\n        "italic"\n      ],\n      "subsets": [\n        "latin"\n      ],\n      "version": "v11",\n      "lastModified": "2017-10-10",\n      "files": {\n        "regular": "http://fonts.gstatic.com/s/abeezee/v11/mE5BOuZKGln_Ex0uYKpIaw.ttf",\n        "italic": "http://fonts.gstatic.com/s/abeezee/v11/kpplLynmYgP0YtlJA3atRw.ttf"\n      }\n    },\n    ...\n  ]\n}\n</code></pre></div>\n\n\n\n<p>Nice! So we somewhat have all the family names, but I don\'t want to serve such a large file to my frontend just for the names. So I started writing a script to grab all the font names.</p>\n\n<h2>The bash script</h2>\n\n<p><a href="https://github.com/faviator/faviator.xyz/blob/dev/scripts/grepFonts.bash"><code>grepFonts.bash</code></a></p>\n\n\n\n<div class="highlight"><pre class="highlight shell"><code><span class="c">#!/usr/bin/env bash</span>\n<span class="nv">KEY</span><span class="o">=</span><span class="nv">$1</span>\n\n<span class="nb">echo</span> <span class="s1">\'[\'</span>\n\ncurl <span class="nt">-s</span> <span class="s2">"https://www.googleapis.com/webfonts/v1/webfonts?key=</span><span class="nv">$KEY</span><span class="s2">&amp;sort=alpha"</span> | <span class="se">\\</span>\n  <span class="nb">sed</span> <span class="nt">-n</span> <span class="s1">\'s/ *"family": "\\(.*\\)",/  "\\1",/p\'</span> | <span class="se">\\</span>\n  <span class="nb">sed</span> <span class="s1">\'$s/\\(.*\\),/\\1/\'</span>\n\n<span class="nb">echo</span> <span class="s1">\']\'</span>\n</code></pre></div>\n\n\n\n<p>Usage:</p>\n\n\n\n<div class="highlight"><pre class="highlight plaintext"><code>&gt; bash grepFonts.bash YOUR-API-KEY\n[\n  "ABeeZee",\n  "Abel",\n  "Abhaya Libre",\n  "Abril Fatface",\n  "Aclonica",\n  "Acme",\n  ...\n  "Zeyada",\n  "Zilla Slab",\n  "Zilla Slab Highlight"\n]\n</code></pre></div>\n\n\n\n<p>And here we go, no more frustration when selecting text on <a href="https://www.faviator.xyz/playground">faviator playground</a>!</p>\n\n<p><a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xEEau8pF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://s14.postimg.org/yjw9efq8x/image.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xEEau8pF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://s14.postimg.org/yjw9efq8x/image.png" alt="image.png"></a></p>\n\n\n',
    contentSnippet: 'Background\n\nSo if you have already read my previous post about faviator, you might have visited the faviator playground.\n\n\n\n        \n          \n            \n          \n          \n            \n              Introducing Faviator: A simple easy favicon generator\n              Jason Yu\n              \n#favicon#showdev#opensource#npm\n\n            \n        \n      \n\n\nI am very grateful to have received 19 stars (including my own star) on GitHub last week. My first goal for this project is to collect 100 stars, so please be generous.\n\nThis week has been very exciting, I have got a few issues raised on github which implies that somebody is actually using faviator! Yay!\n\nI heard some feedback regarding the faviator playground. One of which suggests to provide a dropdown to make font style selecting easier.\n\nSo I decided to work on this one first. \n\nExploring Google Font API\n\nThe Google Font API is a very simple API. The API has only one endpoint which returns all font information given your API key.\n\n\n\nhttps://www.googleapis.com/webfonts/v1/webfonts?key=YOUR-API-KEY\n\n\n\n\nYou can generate your own API key here. The endpoint above return something like the following.\n\n\n\n{\n  "kind": "webfonts#webfontList",\n  "items": [\n    {\n      "kind": "webfonts#webfont",\n      "family": "ABeeZee",\n      "category": "sans-serif",\n      "variants": [\n        "regular",\n        "italic"\n      ],\n      "subsets": [\n        "latin"\n      ],\n      "version": "v11",\n      "lastModified": "2017-10-10",\n      "files": {\n        "regular": "http://fonts.gstatic.com/s/abeezee/v11/mE5BOuZKGln_Ex0uYKpIaw.ttf",\n        "italic": "http://fonts.gstatic.com/s/abeezee/v11/kpplLynmYgP0YtlJA3atRw.ttf"\n      }\n    },\n    ...\n  ]\n}\n\n\n\n\nNice! So we somewhat have all the family names, but I don\'t want to serve such a large file to my frontend just for the names. So I started writing a script to grab all the font names.\n\nThe bash script\n\ngrepFonts.bash\n\n\n\n#!/usr/bin/env bash\nKEY=$1\n\necho \'[\'\n\ncurl -s "https://www.googleapis.com/webfonts/v1/webfonts?key=$KEY&sort=alpha" | \\\n  sed -n \'s/ *"family": "\\(.*\\)",/  "\\1",/p\' | \\\n  sed \'$s/\\(.*\\),/\\1/\'\n\necho \']\'\n\n\n\n\nUsage:\n\n\n\n> bash grepFonts.bash YOUR-API-KEY\n[\n  "ABeeZee",\n  "Abel",\n  "Abhaya Libre",\n  "Abril Fatface",\n  "Aclonica",\n  "Acme",\n  ...\n  "Zeyada",\n  "Zilla Slab",\n  "Zilla Slab Highlight"\n]\n\n\n\n\nAnd here we go, no more frustration when selecting text on faviator playground!',
    guid: 'https://dev.to/ycmjason/here-is-a-little-script-to-grab-a-list-of-all-font-names-on-google-fonts--4b81',
    isoDate: '2018-03-02T21:58:02.000Z' } ]
